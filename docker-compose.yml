version: '3'

services:
  db:
    image: mongo
    ports:
      - 27017:27017

  builds:
    build:
      context: .
    container_name: builds
    environment:
      - NODE_ENV_DOCKER=true
      - DATABASE_URL=mongodb://db/service1-db

  gateway1:
    image: yurikrupnik/client-apps_gateway1
    build:
      context: packages/gateway1
    container_name: gateway1
    environment:
      - NODE_ENV_DOCKER=true
      - DATABASE_URL=mongodb://db/service1-db
      - DEST_PORT=8000
      - HOST=http://service1
    command: npm run start
    depends_on:
      - db
      - builds

  service1:
    image: yurikrupnik/client-apps_service11sr
    build:
      context: packages/service1
    container_name: service1
    environment:
      - NODE_ENV_DOCKER=true
      - DATABASE_URL=mongodb://db/service1-db
    command: npm run start
    depends_on:
      - db
      - builds

  webserver1:
    image: yurikrupnik/client-apps_webserver1
    build:
      context: packages/webserver1
    container_name: webserver1
    environment:
      - NODE_ENV_DOCKER_DEV=true
      - NODE_ENV_DOCKER=true
      - DEST_PORT=7000
      - HOST=http://gateway1
    ports:
      - 9000:9000
#    networks:
#      - mynet
    command: npm run start
    depends_on:
      - db
      - builds
#    deploy:
#      replicas: 4
#      update_config:
#        parallelism: 2
#        delay: 10s
#      restart_policy:
#        condition: on-failure

#  visualizer:
#    image: dockersamples/visualizer:stable
#    ports:
#      - "8080:8080"
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    deploy:
#      placement:
#        constraints: [node.role == manager]

#networks:
#  mynet:
