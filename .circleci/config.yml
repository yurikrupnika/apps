version: 2.1

defaults: &defaults
  working_directory: ~/area
  docker:
    - image: circleci/node:12
    - image: google/cloud-sdk
#    - image: yurikrupnik/client-apps-lerna:latest

#docker: &docker
#  working_directory: ~/docker
##  machine: true
#  machine: true
#    - image: ubuntu-1604:201903-01


#  - docker_layer_caching: true



only-deploy-tags: &only-deploy-tags
  filters:
    tags:
      only: /^.*/
    branches:
#      only: master
      ignore: /.*/


only-deploy-tags-with-v: &only-deploy-tags-with-v
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/
#      only: master

orbs:
  puppeteer: threetreeslight/puppeteer@0.1.2

jobs:
  coverage:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: install-packages
          command: npm run pi

      - run:
          name: test with coverage
          command: npx jest --coverage --colors -i
      - run:
          name: Upload Coverage Results
          command: |
            bash <(curl -s https://codecov.io/bash) \
              -n ${CIRCLE_BUILD_NUM} \
              -t ${CODECOV_TOKEN} \
              -y .codecov.yml \


  deploys:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: ls -a
          command: ls -a
      - run:
          name: echo $CIRCLE_TAG
          command: echo $CIRCLE_TAG

  dc-para:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
#          docker_layer_caching: true
      - run:
          name: docker login
          command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
      - attach_workspace:
          at: ~/docker
      - run:
          name: docker build lerna layer
          command: docker-compose -f docker-compose.lerna.yml build --force-rm
      - run:
          name: docker build
          command: docker-compose build --parallel --force-rm
      - run:
          name: docker images
          command: docker images
      - run:
          name: tag gateway1
          command: docker tag yurikrupnik/client-apps_gateway1 yurikrupnik/client-apps_gateway1:$CIRCLE_SHA1
      - run:
          name: push gateway1
          command: docker push yurikrupnik/client-apps_gateway1:$CIRCLE_SHA1


  dc:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
#          docker_layer_caching: true
      - run:
          name: docker login
          command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
      - attach_workspace:
          at: ~/docker
      - run:
          name: build projects
          command: docker build -t yurikrupnik/client-apps_projects:$CIRCLE_SHA1 .
      - run:
          name: push
          command: docker push yurikrupnik/client-apps_projects:$CIRCLE_SHA1

  since-docker-build-e2e:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: pi since
          command: npx lerna exec --parallel --since -- npm i
      - setup_remote_docker
      - run:
          name: docker login
          command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
      - run:
          name: docker images
          command: docker images
      - run:
          name: build lerna
          command: docker-compose -f docker-compose.lerna.yml build  --force-rm
      - run:
          name: docker build images not using docker-compose
          command: docker-compose build $(npx lerna changed -a -q) --parallel
      - run:
          name: docker images
          command: docker images
      - run:
          name: containers up
          command: docker-compose up $(npx lerna changed -a -q) -d
      - run:
          name: check containers
          command: docker-compose ps
      - run:
          name: check images
          command: docker-compose images
      - run:
          name: DOCKER_HOST
          command: echo $DOCKER_HOST
      - run:
          name: e2e since
          command: npm run e2e -- -- --since

      - run:
          name: containers down
          command: docker-compose down $(npx lerna changed -a -q)
#      - run:
#          name: push
#          command: docker push yurikrupnik/client-apps_service1:$CIRCLE_SHA1
#      - run:
#          name: tag projects
#          command: docker tag yurikrupnik/client-apps_projects yurikrupnik/client-apps_projects:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push projects
#          command: docker push yurikrupnik/client-apps_projects
#      - run:
#          name: tag webserver1
#          command: docker tag yurikrupnik/client-apps_webserver1 yurikrupnik/client-apps_webserver1:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push webserver1
#          command: docker push yurikrupnik/client-apps_webserver1
#      - run:
#          name: tag webserver2
#          command: docker tag yurikrupnik/client-apps_webserver2 yurikrupnik/client-apps_webserver2:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push webserver2
#          command: docker push yurikrupnik/client-apps_webserver2
#      - run:
#          name: tag docs
#          command: docker tag yurikrupnik/client-apps_docs yurikrupnik/client-apps_docs:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push docs
#          command: docker push yurikrupnik/client-apps_docs
#      - run:
#          name: tag lerna
#          command: docker tag yurikrupnik/client-apps_lerna yurikrupnik/client-apps_lerna:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push lerna
#          command: docker push yurikrupnik/client-apps_lerna
#      - run:
#          name: tag gateway1
#          command: docker tag yurikrupnik/client-apps_gateway1 yurikrupnik/client-apps_gateway1:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push gateway1
#          command: docker push yurikrupnik/client-apps_gateway1

  dc-e2e-all:
    working_directory: ~/area
    docker:
      - image: circleci/node:12
        environment:
          NODE_ENV: development
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: docker login
          command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
      - run:
          name: docker images
          command: docker images
#            docker images \
#      - run:
#          name: delete rmi
#          command: docker rmi $(docker images -q) -f
      - run:
          name: build lerna
          command: docker-compose -f docker-compose.lerna.yml build  --force-rm
      - run:
          name: build images
          command: docker-compose build --force-rm --parallel
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
                libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
                libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \
                libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
                ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget --fix-missing
      - run: #STABLE
          name: Install Chromedriver latest version
          command: |
            sudo apt-get update
            sudo apt-get install lsb-release libappindicator3-1
            curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome.deb
            sudo sed -i 's|HERE/chrome"|HERE/chrome" --no-sandbox|g' /opt/google/chrome/google-chrome
            rm google-chrome.deb
      - run:
          name: Install Headless Chrome dependencies
          command: |
            sudo apt-get install -yq \
            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      - run:
          name: Install puppeteer with chronium
          command: |
            npm i puppeteer

      - run: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm i
      - run: npm run pi
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run:
          name: docker images
          command: docker images
      - run:
          name: docker-compose up
          command: docker-compose up -d
      - run:
          name: docker info
          command: docker info
      - run:
          name: docker logs e2e
          command: npm run e2e
      - run:
          name: docker-compose down
          command: docker-compose down
      - run:
          name: docker images
          command: docker images
#      - persist_to_workspace:
#          root: ~/docker
#          paths:
#            .
      - run:
          name: docker images
          command: docker images
      - run:
          name: Echo $CIRCLE_BRANCH
          command: echo $CIRCLE_BRANCH
      - run:
          name: Echo $CIRCLE_BUILD_NUM
          command: echo $CIRCLE_BUILD_NUM
      - run:
          name: Echo $IMAGE_NAME
          command: echo $IMAGE_NAME
      - run:
          name: Echo $CIRCLE_TAG
          command: echo $CIRCLE_TAG
      - run:
          name: Echo $CIRCLE_SHA1
          command: echo $CIRCLE_SHA1
      - run:
          name: Echo $CIRCLE_PR_areaNAME
          command: echo $CIRCLE_PR_AREANAME
      - run:
          name: Echo $CIRCLE_PR_USERNAME
          command: echo $CIRCLE_PR_USERNAME
#      - run:
#          name: tag service1
#          command: docker tag yurikrupnik/client-apps_service1 yurikrupnik/client-apps_service1:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push service1
#          command: docker push yurikrupnik/client-apps_service1
#      - run:
#          name: tag projects
#          command: docker tag yurikrupnik/client-apps_projects yurikrupnik/client-apps_projects:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push projects
#          command: docker push yurikrupnik/client-apps_projects
#      - run:
#          name: tag webserver1
#          command: docker tag yurikrupnik/client-apps_webserver1 yurikrupnik/client-apps_webserver1:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push webserver1
#          command: docker push yurikrupnik/client-apps_webserver1
#      - run:
#          name: tag webserver2
#          command: docker tag yurikrupnik/client-apps_webserver2 yurikrupnik/client-apps_webserver2:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push webserver2
#          command: docker push yurikrupnik/client-apps_webserver2
#      - run:
#          name: tag docs
#          command: docker tag yurikrupnik/client-apps_docs yurikrupnik/client-apps_docs:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push docs
#          command: docker push yurikrupnik/client-apps_docs
#      - run:
#          name: tag lerna
#          command: docker tag yurikrupnik/client-apps_lerna yurikrupnik/client-apps_lerna:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push lerna
#          command: docker push yurikrupnik/client-apps_lerna
#      - run:
#          name: tag gateway1
#          command: docker tag yurikrupnik/client-apps_gateway1 yurikrupnik/client-apps_gateway1:1.0.$CIRCLE_BUILD_NUM
#      - run:
#          name: push gateway1
#          command: docker push yurikrupnik/client-apps_gateway1
#      - run:
#          name: delete images
#          command: docker rmi $(docker images -q) -f
#            docker images \
#            docker rmi $(docker images -q) -f \
#            docker images \

  deploy_npm:
    working_directory: ~/area
    docker:
      - image: circleci/node:12
        environment:
          NODE_ENV: development
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b4:56:37:ff:6e:ba:c2:c4:ae:b1:67:5f:fb:5e:d5:e8"
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: pi since
          command: npx lerna exec --parallel --since -- npm i
      - run:
          name: build since
          command: npx lerna exec --parallel --since -- npm run build
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > ~/.npmrc
      - run:
          name: config email
          command: git config --global user.email "krupnik.yuri@gmail.com" /
            && git config --global user.name "yurikrupnik"
      - run:
          name: whoami
          command: whoami
      - run:
          name: cat .npmrc
          command: cat ~/.npmrc
      - run:
          name: publish
          command: npx lerna publish patch --no-verify-access --yes --no-push --conventional-commits
      - run:
          name: update package-lock.json after publish
          command: npx lerna exec -- npm install --package-lock-only --ignore-scripts --no-audit
      - run:
          name: git add
          command: git add -u
      - run:
          name: git commit
          command: git commit -am "package-lock.json update"
      - run:
          name: git whoami
          command: whoami
      - run:
          name: tag by npm
          command: npm version patch
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: git push
          command: git push origin --follow-tags
      - run:
          name: git tag
          command: git tag "$(node -p "require('./package.json').version")"  -a -m "$(node -p "require('./package.json').version")"
#
      - run:
          name: git push tag
          command: git push origin master --follow-tags

  all-lint_test_build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: packages install
          command: npm run pi
      - run:
          name: lint
          command: npm run lint
      - run:
          name: test
          command: npx jest --coverage --colors -i
#          npm run test -- -- -- -i
      - run:
          name: build
          command: npm run build
      - run:
          name: Upload Coverage Results
          command: |
            bash <(curl -s https://codecov.io/bash) \
              -n ${CIRCLE_BUILD_NUM} \
              -t ${CODECOV_TOKEN} \
              -y .codecov.yml \

  since-lint_test_build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: pi since
          command: npx lerna exec --parallel --since -- npm i

      - run:
          name: lint since
          command: npm run lint -- --since

      - run:
          name: test since
          command: npx lerna exec --parallel --since -- npm run test -- -i
      - run:
          name: build since
          command: npx lerna exec --parallel --since -- npm run build

  since-lint_test_build-docker:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: pi since
          command: npx lerna exec --parallel --since -- npm i
      - setup_remote_docker
      - run:
          name: docker login
          command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
      - run:
          name: pull lerna
          command: docker pull yurikrupnik/client-apps_lerna
#      - run:
#          name: build lerna
#          command: docker-compose -f docker-compose.lerna.yml build  --force-rm
      - run:
          name: docker build images not using docker-compose
          command: docker-compose build $(npx lerna changed -a -q) --parallel
      - run:
          name: docker images
          command: docker images
      - run:
          name: containers up
          command: docker-compose up $(npx lerna changed -a -q) -d
      - run:
          name: check containers
          command: docker-compose ps
      - run:
          name: check images
          command: docker-compose images
      - run:
          name: DOCKER_HOST
          command: echo $DOCKER_HOST ${DOCKER_HOST}
      - run:
          name: e2e since
          command: npm run e2e -- -- --since

      - run:
          name: containers down
          command: docker-compose down $(npx lerna changed -a -q)

  lerna-changed:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: lerna changed
          command: |
            set -e
            npx lerna changed -a
            if [[ $? -ne 0 ]]; then
              echo all good, can do npm publish
            else
              echo no changes to lerna changed -a
              circleci-agent step halt
            fi





  run-dev-docker:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - setup_remote_docker
      - run:
          name: docker-compose up dev
          command: npm run compose:dev:up
      - run:
          name: docker-compose down dev
          command: npm run compose:dev:down

  run-dev-env:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - setup_remote_docker
      - run:
          name: Run local mongod instance
          command: npm run start:mongo
      - run:
          name: Packages install deps
          command: npm run pi
      - run:
          name: Bootstrap
          command: npm run bootstrap

  run-prdd-all:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - setup_remote_docker
      - run:
          name: Build lerna layer
          command: docker-compose -f docker-compose.lerna.yml build
      - run:
          name: Build images parallel
          command: docker-compose build --parallel --force-rm
      - run:
          name: Run images
          command: npm run compose:prod:up
      - run:
          name: Check for running containers
          command: docker-compose ps
      - run:
          name: Stop images
          command: npm run compose:prod:down
      - run:
          name: deploy:docker:single-host
          command: npm run deploy:docker:single-host
  since-deploy-functions-gc:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: update-npm
          command: sudo npm install -g npm@6
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

  gc-deploy:
#    <<: *defaults
    docker:
      - image: google/cloud-sdk
#        auth:
#          username: circleci@todo-262721.iam.gserviceaccount.com  # default username when using a JSON key file to authenticate
#          password: k
    steps:
      - checkout
#      - run:
#          name: update-npm
#          command: sudo npm install -g npm@6
#      - restore_cache:
#          key: dependency-cache-{{ checksum "package.json" }}
#      - run:
#          name: install-npm-wee
#          command: npm install
#      - save_cache:
#          key: dependency-cache-{{ checksum "package.json" }}
#          paths:
#            - ./node_modules
#      - run: |
##          apt-get update || apt-get update
#          gcloud auth activate-service-account --key-file=https://www.googleapis.com/robot/v1/metadata/x509/circleci%40todo-262721.iam.gserviceaccount.com
#          gcloud config list
#          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
#          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
#          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: check gcloud
          command: |
            gcloud config set functions/region europe-west1
            gcloud config set compute/region europe-west1
            gcloud config set compute/zone europe-west1-b
            gcloud auth list
            gcloud config list


workflows:
  version: 2

  build:
    jobs:
      - gc-deploy
      - all-lint_test_build:
          filters:
            branches:
              only: master
      - since-lint_test_build:
          filters:
            branches:
#              only: master
              ignore: master
      - since-deploy-functions-gc:
          filters:
            branches:
#              only: master
              ignore: master
#      - since-lint_test_build-docker
#          filters:
#            branches:
#              ignore: master
#      - since-docker-build-e2e
#      - deploy_npm:
#          filters:
#            branches:
#              only: master
#            tags:
#              ignore: /.*/
#      - dc-e2e-all
#      - coverage:
#          filters:
#            branches:
#              only: master
#      - dc:
#          filters:
#            branches:
#              only: master
#      - dc-para:
#          filters:
#            branches:
#              only: master
#      - since:
#          filters:
#            branches:
#              only: master

#      - dc-e2e-all:
#          filters:
#            branches:
#              only: master

#          requires:
#            - build

  deploy-with-tags:
    jobs:
#      - dc-deploy_npm-all:
#          <<: *only-deploy-tags
#      - dc-e2e-all:
#          <<: *only-deploy-tags
#      - dc-push-all:
#          <<: *only-deploy-tags
#          requires:
#            - dc-e2e-all
      - coverage:
          <<: *only-deploy-tags
#          requires:
#            - deploy_npm
      - deploys:
          <<: *only-deploy-tags-with-v

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - run-prdd-all
      - run-dev-docker
      - run-dev-env

